import os
import requests
import json
import pandas as pd
from dotenv import load_dotenv

from modules.MCForecastTools import MCSimulation
import warnings
warnings.filterwarnings(action='ignore')




from matplotlib.figure import Figure
from matplotlib import cm
from matplotlib.backends.backend_agg import FigureCanvas  # not needed for mpl >= 3.1

def prep_MC_data(ticker_data, weights):
    # Load the environment variables from the .env file
#     load_dotenv()
    
    # pull weights from weights df into list
    weight_list = weights['weight'].to_list()

#     # Set the variables for the Alpaca API and secret keys
#     alpaca_api_key = os.getenv("ALPACA_API_KEY")
#     alpaca_secret_key = os.getenv("ALPACA_SECRET_KEY")

#     api = tradeapi.REST(
#         alpaca_api_key,
#         alpaca_secret_key,
#         api_version = "v2"
#     )

#     # Tickers for all assets, timeframe, timezone amd 10 years history

#     # tickers = ["MSFT", "BOND", "BTC", "OIL"]

#     timeframe = "1Day"

#     start_date = pd.Timestamp("2011-12-31", tz="America/New_York").isoformat()
#     end_date = pd.Timestamp("2023-02-07", tz="America/New_York").isoformat()


#     # Use the Alpaca get_bars function to get current closing prices the portfolio
    
#     ticker_data = api.get_bars(
#         tickers,
#         timeframe,
#         start=start_date,
#         end=end_date
#     ).df

#     # Reorganize the DataFrame
#     # Separate ticker data
#     symbols = ticker_data.symbol.unique()
#     dfs = []
#     for s in symbols:
#         df = ticker_data[ticker_data['symbol']== s].drop('symbol', axis=1)
#         dfs.append(df)
#     ticker_data = pd.concat(dfs, axis=1, keys=symbols).dropna()
    
    
#     STOCK = ticker_data[ticker_data['symbol']=='MSFT'].drop('symbol', axis=1)
#     BOND = ticker_data[ticker_data['symbol']=='BOND'].drop('symbol', axis=1)
#     CRYPTO = ticker_data[ticker_data['symbol']=='BTC'].drop('symbol', axis=1)
#     COMMS = ticker_data[ticker_data['symbol']=='OIL'].drop('symbol', axis=1)

#     # Concatenate the ticker DataFrames
#     ticker_data = pd.concat([STOCK, BOND, CRYPTO, COMMS],axis=1, keys=tickers).dropna()


    simulation = MCSimulation(
        portfolio_data = ticker_data,
        weights=weight_list,
        num_simulation = 200,
        num_trading_days =252*10
    )


    simulation.calc_cumulative_return()
    invested_amount = 100000
    simulation_plot = simulation.plot_simulation()
    distribution_plot = simulation.plot_distribution()
    summary = simulation.summarize_cumulative_return()
    ci_lower_ten_cumulative_return = round(summary[8]*invested_amount,2)
    ci_upper_ten_cumulative_return = round(summary[9]*invested_amount,2)
    text = f"""
            There is a 95% chance that the final portfolio value after 10 years will be within the range of ${ci_lower_ten_cumulative_return:,.2f} and ${ci_upper_ten_cumulative_return:,.2f} based upon an initial investment of ${invested_amount:,.2f}
            """
    
    return simulation_plot, distribution_plot, summary, text
    
def get_simulation_plot():
    return simulation.plot_simulation()


def get_distribution_plot():
    return simulation.plot_distribution()


def get_statistics():
    pass

def get_text():
    text = """
    <h4>A Monte Carlo Simulation is available to be run, which is a computer-based modeling technique used to estimate the potential range of returns for an investment over a specified time period (in this case, 10 years). It uses statistical algorithms to generate multiple simulations of potential returns and can help to assess the potential risk and reward of an investment.
    <br><br>
    The simulation is not run automatically but can be provided by clicking on the button below. Please be aware that the simulation involves a large number of calculations, which may result in a waiting period of one to two mintues. 
    <br><br>
    Once completed, you will be presented with the following:
    <br>
    <ul>

<li>
A line chart showing the cumulative portfolio returns over time for each of the 200 simulations. This chart can provide a visual representation of the portfolio's potential future performance
</li>

<li>
A distribution chart providing a visual representation of the frequency of the portoflio's final cumulative return for each of the 200 simulations. This can provide and indication for the likelihood for a certain outcome
</li>

<li>
A statement indicating the range of values in which 95% of simulations run are likely to fall. This again provides an indication of the portfolio's potential future performance
</li>

</ul>


    </h4>
    """
    return text


def get_mc_footer():
    return """
    The projections or other information generated by Monte Carlo analysis tools regarding the likelihood of various investment outcomes are hypothetical in nature, do not reflect actual investment results, and are not guarantees of future results. Results may vary with each use and over time. Because of the many variables involved, an investor should not rely on forecasts without realizing their limitations."""